jagocoder-converter
===================

このパッケージは、住所ジオコーダ
`jageocoder (https://github.com/t-sagara/jageocoder/)`_
で利用する住所辞書を作成するための CUI アプリケーションです。
一部の都道府県だけを含む辞書を作成したい場合などに利用できます。

何らかの事情で辞書データの更新ができなくなった場合に備えて、
手順を公開しておきたいという意図もあります。

独自に作成・入手した位置参照情報を利用した辞書を
作成したい場合にも、このパッケージを拡張して利用してください。

インストール
------------

Python 3.6 以降が必要です。 ``pip`` でインストールします。 ::

  pip install jageocoder-converter


実行方法
--------

辞書を作成するにはモジュールを直接実行します。 ::

  python -m jageocoder_converter


``-h`` オプションでヘルプを表示します。 ::

  python -m jageocoder_converter -h

実行すると、辞書作成に必要な位置参照情報をダウンロードして変換し、
辞書を作成します。

ダウンロードする前に利用規約などへのリンクと確認のプロンプトが
表示されますので、規約等を必ず読んでから大文字の 'Y' を
入力してください。

**オプション**

以下のオプションが指定可能です。

- ``-d``, ``--debug``

  実行中のデバッグログを表示します。

- ``-q``, ``--quiet``

  表示や確認をスキップします。既に利用規約などを理解していて
  処理の途中で確認のために停止するのを避けたい場合に指定します。

- ``--no-oaza``

  指定すると国土交通省の大字・町丁目レベル位置参照情報を
  利用しません。

- ``--no-gaiku``

  指定すると国土交通省の街区レベル位置参照情報を
  利用しません。

- ``--no-jusho``

  指定すると国土地理院の電子国土基本図「住居表示住所」を
  利用しません。データサイズが小さくなります。

- ``--db-dir``

  指定するとそのディレクトリに辞書を作成します。
  指定しない場合、 jageocoder のデフォルトディレクトリに
  辞書を作成します。**既に辞書が存在する場合は上書きします。**

- ``--output-dir``

  ``--download-dir`` と ``--textdata-dir`` の親ディレクトリを
  指定します。指定しない場合、実行したディレクトリに作成します。

- ``--download-dir``

  指定するとそのディレクトリにダウンロードしたファイルを
  保存します。指定しない場合 './download/' に保存します。

- ``--textdata-dir``

  変換処理の途中で、位置参照情報からテキストデータを
  作成しますが、そのファイルを指定したディレクトリに
  保存します。指定しない場合は './text/' に保存します。

**実行例**

代表的な実行例を示します。

・千葉県・埼玉県・東京都・神奈川県の街区レベル辞書を作成 ::

  python -m jageocoder_converter --no-jusho 11 12 13 14

・東京都だけの住居表示住所レベル辞書を作成 ::

  python -m jageocoder_converter 13

・全国の大字・町丁目レベル辞書を ``./oazadb/`` に作成 ::

  python -m jageocoder_converter --db-dir=oazadb --no-gaiku --no-jusho

・全国の住居表示住所レベルまでの辞書をバックグラウンドで作成 ::

  nohup python -m jageocoder_converter -d -q &
  tail -f nohup.out


拡張のためのヒント
------------------

**大まかな処理の流れ**

変換処理は ``jageocoder_converter/__init__:convert()`` で行ないます。

まず、位置参照情報ごとに ``CityConverter``, ``OazaConverter`` などの
変換用のクラスを呼びだして、統一フォーマットのテキストデータに
変換します。

次に DataManager がテキストデータを都道府県ごとにまとめ、
文字コード順にソートし、 SQLite3 データベースに INSERT します。

ソート処理を行なうことで、親となる住所要素が子となる住所要素の直前に
現れることが保証されます。そのため１度のループで
住所要素に順番に ID を発行し、子の要素に親の要素を参照する
``parent_id`` をセットすることができます。

最後に SQLite3 と TRIE インデックスを作成して完了です。

**テキストデータのフォーマット**

独自の位置参照情報を利用した辞書を作成するには、
``OazaConverter`` などを参考に、元データをパースして DataManager が
読み込めるテキストデータを出力するコンバータクラスを追加してください。

テキストデータは1行が1つの住所を表し、次のような形式です。 ::

  「東京都多摩市落合一丁目15番地」を表す行
  1;東京都,3;多摩市,5;落合,6;一丁目,7;15番地,!02,139.428969,35.625779

基本構造はカンマ区切りでフィールドを並べます。

``1;東京都`` から ``7;15番地`` までは住所要素の列です。
セミコロンの前の数字はその要素の住所レベルを表し、
1が都道府県、3が市区町村、5が大字、6が字、7が街区です。
この数字の定義は ``jageocoder.address.AddressLevel`` にありますが、
拡張する場合は任意の値を指定できます。

次の ``!02`` はこの位置参照情報のプライオリティを表します。
同じ住所を示す行が複数存在する場合、 DataManager は最初に現れた行を
利用し、残りの行は無視します。
複数の位置参照情報が同じ住所を指すレコードを含む場合、
優先したい方の数字を小さくしておけば、テキストファイルを
ソートしたときにそちらが先に現れて利用されます。

その後ろの ``139.428969``, ``35.625779`` は経度と緯度です。
この後ろにさらに文字列を追加することも可能で、
その場合は note として辞書に登録されます。

たとえば ``CityConverter`` が作成した「多摩市」の行は次の通りです。 ::

  1;東京都,3;多摩市,!01,139.44636600,35.63695900,jisx0402:13224

このテキストデータから作成した辞書を利用して jageocoder で
「多摩市」を検索すると、次のように note に最後のフィールドの値
``jisx0402:13224`` が格納されていることが確認できます。 ::

  >>> import jageocoder
  >>> jageocoder.init(db_dir='oazadb')
  >>> jageocoder.search('多摩市')
  {'matched': '多摩市', 'candidates': [{'id': 2145, 'name': '多摩市', 'x': 139.446366, 'y': 35.636959, 'level': 3, 'note': 'jisx0402:13224', 'fullname': ['東京都', '多摩市']}]}

コードや注釈などを記録するために利用できます。

開発者・連絡先
--------------

相良 毅 @ `株式会社情報試作室 <https://www.info-proto.com>`_

ライセンス
----------

このパッケージは MIT ライセンスで利用できます。

ダウンロードした位置参照情報の利用条件については、それぞれの規約等を
参照してください。


